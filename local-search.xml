<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>next.js配置测试环境的解决方案</title>
    <link href="/2020/11/30/next-js%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2020/11/30/next-js%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>一般来说，next框架在不同环境中使用<strong>.env.local</strong>中的不同配置即可区分，但是运维同学表示并不想多写这一行代码，只能自己动手啦。</p><blockquote><p> 项目中的代码需要在3个环境中运行：开发环境、测试环境、生产环境，而next中通过<code>process.env.NODE_ENV</code>的方式只支持development和production两种方式，那么如何解决测试环境的问题呢？</p></blockquote><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="server-server-js"><a href="#server-server-js" class="headerlink" title="server/server.js"></a>server/server.js</h3><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> next = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;next&#x27;</span>)<span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>)<span class="hljs-keyword">const</span> port = process.env.PORT || <span class="hljs-number">3000</span><span class="hljs-keyword">const</span> dev = process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span><span class="hljs-keyword">const</span> app = next(&#123; dev &#125;)<span class="hljs-keyword">const</span> handle = app.getRequestHandler()<span class="hljs-keyword">const</span> apiPaths = &#123;  <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;    target: <span class="hljs-string">&#x27;http://www.target.com&#x27;</span>,    pathRewrite: &#123;      <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>    &#125;,    changeOrigin: <span class="hljs-literal">true</span>  &#125;&#125;<span class="hljs-keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>app.prepare().then(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-keyword">const</span> server = express()   <span class="hljs-keyword">if</span> (isDevelopment &amp;&amp; apiPaths) &#123;    <span class="hljs-built_in">Object</span>.keys(apiPaths).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;      server.use(createProxyMiddleware(context, apiPaths[context]))    &#125;)  &#125;  server.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> handle(req, res)  &#125;)  server.listen(port, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`&gt; Ready on http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>)  &#125;)&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Error:::::&#x27;</span>, err)&#125;)</code></pre><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><pre><code class="hljs jboss-cli"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;cross-env NODE_ENV=development node server/server.js&quot;</span>,  <span class="hljs-string">...</span>&#125;,</code></pre><p><code>process.env.NODE_ENV</code>为<code>development</code>时为请求url添加<strong>/api</strong>前缀即可</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>测试环境与生产环境同使用<code>next start</code>进行构建，<code>cross-env NODE_ENV=staging next start</code>是无效的，next.js在执行start时会将其覆盖，因为区分测试环境和生产环境则是个棘手的问题。</p><p>生产环境和测试环境部署在不同的域名下，解决方案可以通过当前域名来作为区分，而node环境是没有window对象和域名的，因此只要解决代码在node环境下运行时的问题即可解决。</p><h3 id="swr全局配置"><a href="#swr全局配置" class="headerlink" title="swr全局配置"></a>swr全局配置</h3><p>_app.js</p><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> fetcher <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/fetcher&#x27;</span>&lt;SWRConfig   value=&#123;&#123;    fetcher,  &#125;&#125;&gt;  &lt;Component &#123;...pageProps&#125; /&gt;&lt;/SWRConfig&gt;</code></pre><h3 id="封装fetcher"><a href="#封装fetcher" class="headerlink" title="封装fetcher"></a>封装fetcher</h3><blockquote><p>swr会在每次请求时调用fetcher，因此通过闭包将当前环境下的host持久化储存即可</p></blockquote><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetcher = <span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-keyword">let</span> host = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">// node环境同样会被执行，因为没有window对象在此会抛出一个error</span>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>) &#123;      <span class="hljs-keyword">if</span>(process.env.NODE_ENV === <span class="hljs-string">&#x27;development&#x27;</span>) &#123;        <span class="hljs-comment">// 开发环境</span>        host = <span class="hljs-string">&#x27;/api&#x27;</span>      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 通过当前域名来区分不同环境</span>        host = <span class="hljs-built_in">window</span>.location.host.includes(<span class="hljs-string">&#x27;test&#x27;</span>) ? <span class="hljs-string">&#x27;http://www.test.com&#x27;</span> : <span class="hljs-string">&#x27;https://www.prod.com&#x27;</span>      &#125;    &#125;  &#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">api, ...args</span>) =&gt;</span> fetch(host+api, ...args).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())&#125;<span class="hljs-comment">// 闭包持久化储存host，避免每次调用时执行</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> fetcher()</code></pre><hr><p>end</p>]]></content>
    
    
    
    <tags>
      
      <tag>next.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/02/hello-world/"/>
    <url>/2020/09/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
